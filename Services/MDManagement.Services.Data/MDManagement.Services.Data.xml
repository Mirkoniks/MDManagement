<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MDManagement.Services.Data</name>
    </assembly>
    <members>
        <member name="M:MDManagement.Services.Data.Implementations.AddressDataService.AddEmployeeToAddress(MDManagement.Services.Models.Address.AddEmployeeToAddressServiceModel)">
            <summary>
            Adds address to a employee
            </summary>
            <param name="info">Service model which contains the needed info</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.AddressDataService.Create(MDManagement.Services.Models.Address.CreateAddressServiceModel)">
            <summary>
            Creates an address
            </summary>
            <param name="address">Service model which creastes an address</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.AddressDataService.FindById(System.Int32)">
            <summary>
            Finds an addres 
            </summary>
            <param name="id">Address id</param>
            <returns>Address service model with the needen info</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.AddressDataService.FindByName(System.String)">
            <summary>
            Finds an address by name
            </summary>
            <param name="addressText">Address text</param>
            <returns>Address service model with the needen info</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.CompanyDataSerive.FindById(System.Nullable{System.Int32})">
            <summary>
            Finds a Company by id
            </summary>
            <param name="id">Company id</param>
            <returns>Company service model which contains the needed info</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.CompanyDataSerive.FindByCompanyCode(System.String)">
            <summary>
            Finds a Company by company code
            </summary>
            <param name="companyCode">Company code</param>
            <returns>Company service model which contains the needed info</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.CompanyDataSerive.FindByName(System.String)">
            <summary>
            Find a company by id
            </summary>
            <param name="name">Company name</param>
            <returns>Company service model which contains the needed info</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.CompanyDataSerive.Create(MDManagement.Services.Models.Company.CreateCompanyServiceModel)">
            <summary>
            Creates a company
            </summary>
            <param name="model">CreateCompanyServiceModel is a DTO with enough info for creating a company</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.CompanyDataSerive.Exists(System.String)">
            <summary>
            Checks by company name if a company really exists
            </summary>
            <param name="companyName">Company name</param>
            <returns>Returns true if exists</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.CompanyDataSerive.IsValidCompany(System.String)">
            <summary>
            Checks by company code if a company really exists
            </summary>
            <param name="companyCode">Company code</param>
            <returns>Returns true if exists</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.CompanyDataSerive.HasEmployees(System.Nullable{System.Int32})">
            <summary>
            Checks by comapny id if there is employees in this company
            </summary>
            <param name="companyId">Company id</param>
            <returns>Returns true if exists</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.DepatmentDataService.Create(System.String)">
            <summary>
            Creates an Department
            </summary>
            <param name="name">Department name</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.DepatmentDataService.Exists(System.String)">
            <summary>
            Checks by department name if company really exists 
            </summary>
            <param name="departmentName">Department name</param>
            <returns>Returns true if exists</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.DepatmentDataService.Exists(System.Nullable{System.Int32})">
            <summary>
            Checks by department name if company really exists 
            </summary>
            <param name="id">Department id</param>
            <returns>Returns true if exists</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.DepatmentDataService.FindById(System.Nullable{System.Int32})">
            <summary>
            Finds a Department by id
            </summary>
            <param name="id">Department id</param>
            <returns>DepartmentServiceModel which contains the needed info</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.DepatmentDataService.FindByName(System.String)">
            <summary>
            Finds a Department by name
            </summary>
            <param name="name">Department name</param>
            <returns>DepartmentServiceModel which contains the needed info</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.AddCompanyToEmployee(MDManagement.Services.Models.Employee.AddCompanyToEmployeeServiceModel)">
            <summary>
            Adds compnay to a employee
            </summary>
            <param name="model">AddCompanyToEmployeeServiceModel is a DTO which contains the needed info for this operations</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.AddJobTitleToEployee(MDManagement.Services.Models.Employee.AddJobTitleToEmployeServiceModel)">
            <summary>
            Adds Job Title to employee
            </summary>
            <param name="addJobTitleToEmployeServiceModel">AddJobTitleToEmployeServiceModel is a DTO which contains the needed info for this operations</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.FindById(System.String)">
            <summary>
            Find employee by id
            </summary>
            <param name="id">Employee id</param>
            <returns>Employee</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.GetAllEmployees(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets all employees and their subordinates
            </summary>
            <param name="companyId">Company id</param>
            <param name="userId">User id</param>
            <param name="userManagerId">Manager id</param>
            <returns>List of EmployeeService model which is a DTO which contains the needed info for this operations</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.GetEmployeeByIdForEdit(System.String)">
            <summary>
            Gets an employee for edit
            </summary>
            <param name="userId">user id</param>
            <returns>EditUserServiceModel which is a DTO which contains the needed info for this operations</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.EditUserDetailsAsync(MDManagement.Services.Models.Employee.EditUserServiceModel)">
            <summary>
            Edits user details
            </summary>
            <param name="model">EditUserServiceModel which is a DTO which contains the needed info for this operations</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.Exists(System.String)">
            <summary>
            Checks by username if employee really exists
            </summary>
            <param name="userName">username</param>
            <returns>Returns true if exists</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.ExistsId(System.String)">
            <summary>
            Checks by id if employee really exists
            </summary>
            <param name="Id">id</param>
            <returns>Returns true if exists</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.FindByNickname(System.String)">
            <summary>
            Finds an employee by username
            </summary>
            <param name="nickName">username</param>
            <returns>Employee</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.GetAllUnconfirmedEmployees(System.Nullable{System.Int32})">
            <summary>
            Gets all unconfirmed employees
            </summary>
            <param name="companyId">Id for the specific company</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.GetUncoFirmedEmployee(System.String)">
            <summary>
            Gets unconfirmed employee
            </summary>
            <param name="id">Employee id</param>
            <returns>UnconfirmedEmployeeServiceModel which is a DTO which contains the needed info for this operations</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.IsAddressNull(System.String)">
            <summary>
            Cheks if the employee's address is null
            </summary>
            <param name="employeeId">Employee id</param>
            <returns>Returns true if address id null</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.FindByIdTheUserName(System.String)">
            <summary>
            Finds employee's username by id
            </summary>
            <param name="id">Employee id</param>
            <returns>Employee's username</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.ConfirmEmployee(System.String)">
            <summary>
            Confirms an employee
            </summary>
            <param name="id">Employee id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.RemoveEmployeeCompany(System.String)">
            <summary>
            Removes company from an employee
            </summary>
            <param name="emplolyeeId">Employee id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.RemoveEmployeeMnager(System.String)">
            <summary>
            Removes Manager from an employee
            </summary>
            <param name="emplolyeeId">Employee id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.RemoveEmployeeDepartmentAsync(System.String)">
            <summary>
            Removes deparment from an employee
            </summary>
            <param name="emplolyeeId">Employee id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.RemoveEmployeeJobTitle(System.String)">
            <summary>
            Removes Job Title from an employee
            </summary>
            <param name="emplolyeeId">Employee id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.RemoveEmployeeCompanyConfirmantion(System.String)">
            <summary>
            Removes Company confirmation from an employee
            </summary>
            <param name="emplolyeeId">Employee id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.RemoveEmployeeProjects(System.String)">
            <summary>
            Removes all projects from an employee
            </summary>
            <param name="emplolyeeId">Employee id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.GetEmployeeSalary(System.String)">
            <summary>
            Gets employee's salary
            </summary>
            <param name="employeeId">Employee id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.SetManager(System.String,System.String)">
            <summary>
            Sets employee's manager
            </summary>
            <param name="managerId">Manger id</param>
            <param name="userId">User id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.EmployeeDataService.RemoveRoles(System.String)">
            <summary>
            Remove all roles from an emoployee
            </summary>
            <param name="employeeId">Employee id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.JobTittleDataServie.FindById(System.Nullable{System.Int32})">
            <summary>
            Find a job tile by id
            </summary>
            <param name="id">Job title id</param>
            <returns>JobTitleServiceModel which is a DTO which contains the needed info for this operations</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.JobTittleDataServie.FindByName(System.String)">
            <summary>
            Finds a job title by name
            </summary>
            <param name="name">Job title name</param>
            <returns>JobTitleServiceModel which is a DTO which contains the needed info for this operations</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.JobTittleDataServie.CreateJobTitile(System.String)">
            <summary>
            Creates a Job Tile  
            </summary>
            <param name="name">Job title name</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.JobTittleDataServie.Exists(System.String)">
            <summary>
            Checks by name if job title exists
            </summary>
            <param name="jobTitle">Job title name</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.JobTittleDataServie.Exists(System.Nullable{System.Int32})">
            <summary>
            Checks by id if job title exists
            </summary>
            <param name="jobId">Job title id</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.GetAllProjects(System.Nullable{System.Int32})">
            <summary>
            Gets all company projects
            </summary>
            <param name="companyId">Company id</param>
            <returns>List of EmployeeProjectServiceModel which is a DTO which contains the needed info for this operations</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.FindProjectById(System.Int32)">
            <summary>
            Finds a proejct by id
            </summary>
            <param name="id">Project id</param>
            <returns>ProjectServiceModel which is a DTO which contains the needed info for this operations</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.Create(MDManagement.Services.Models.Project.ProjectServiceModel)">
            <summary>
            Creates a project
            </summary>
            <param name="model">Project name</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.Join(MDManagement.Services.Models.Project.JoinServiceModel)">
            <summary>
            Joinig a project 
            </summary>
            <param name="model">JoinServiceModel which is a DTO which contains the needed info for this operations</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.FindByCode(System.String)">
            <summary>
            Finds a project by project code
            </summary>
            <param name="projectCode">Project code</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.Exists(System.String)">
            <summary>
            Checks by project code if project really exists
            </summary>
            <param name="projectCode">Project code</param>
            <returns>Returns true if exists</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.GetAllEmployeesInProject(System.Int32)">
            <summary>
            Gets all projects with employees in it
            </summary>
            <param name="projectId">Project id</param>
            <returns>Returns employees ids</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.Assign(System.String,System.Int32)">
            <summary>
            Assigns an employee to a project
            </summary>
            <param name="employeeId">Employee id</param>
            <param name="projectId">Project id</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.IsEmployeeInProject(System.String,System.Int32)">
            <summary>
            Checks if an employes is in a projects
            </summary>
            <param name="employeeId">Employee id</param>
            <param name="projectId">Project id</param>
            <returns>Returns true if it is</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.Edit(MDManagement.Services.Models.Project.ProjectServiceModel)">
            <summary>
            Edits a project
            </summary>
            <param name="model">ProjectServiceModel which is a DTO which contains the needed info for this operations</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.ProjectDataService.GetEmployeeProjects(System.String)">
            <summary>
            Gets all projects of an employee
            </summary>
            <param name="employeeId">Employee id</param>
            <returns>List of EmployeeProjectServiceModel which is a DTO which contains the needed info for this operations</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.TownDataService.Create(MDManagement.Services.Models.Town.CreateTownServiceModel)">
            <summary>
            Creates a town
            </summary>
            <param name="town">CreateTownServiceModel which is a DTO which contains the needed info for this operations</param>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.TownDataService.Exists(System.String)">
            <summary>
            Checks if town exists
            </summary>
            <param name="townName">Town name</param>
            <returns></returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.TownDataService.FindById(System.Int32)">
            <summary>
            Finds a town by id
            </summary>
            <param name="id">Town id</param>
            <returns>TownServiceModel which is a DTO which contains the needed info for this operations</returns>
        </member>
        <member name="M:MDManagement.Services.Data.Implementations.TownDataService.FindByName(System.String)">
            <summary>
            Finds a tonw by name
            </summary>
            <param name="name">Town name</param>
            <returns>TownServiceModel which is a DTO which contains the needed info for this operations</returns>
        </member>
    </members>
</doc>
